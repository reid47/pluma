---
source: tests/src/parse_success.rs
expression: "def hello { A -> B } -> String {\n  a => \"wow!\"\n}"
---

=== Source ===
def hello { A -> B } -> String {
  a => "wow!"
}

=== Tokens ===
[
    KeywordDef(
        0,
        3,
    ),
    Identifier(
        4,
        9,
    ),
    LeftBrace(
        10,
        11,
    ),
    Identifier(
        12,
        13,
    ),
    Arrow(
        14,
        16,
    ),
    Identifier(
        17,
        18,
    ),
    RightBrace(
        19,
        20,
    ),
    Arrow(
        21,
        23,
    ),
    Identifier(
        24,
        30,
    ),
    LeftBrace(
        31,
        32,
    ),
    LineBreak(
        32,
        33,
    ),
    Identifier(
        35,
        36,
    ),
    DoubleArrow(
        37,
        39,
    ),
    StringLiteral(
        41,
        45,
    ),
    LineBreak(
        46,
        47,
    ),
    RightBrace(
        47,
        48,
    ),
]

=== Comments ===
{}

=== AST ===
ModuleNode {
    pos: (
        0,
        48,
    ),
    body: [
        TopLevelStatementNode {
            pos: (
                0,
                48,
            ),
            kind: Def(
                DefNode {
                    pos: (
                        0,
                        48,
                    ),
                    kind: Function {
                        signature: [
                            (
                                IdentifierNode {
                                    pos: (
                                        4,
                                        9,
                                    ),
                                    name: "hello",
                                },
                                TypeExprNode {
                                    pos: (
                                        10,
                                        20,
                                    ),
                                    kind: Func(
                                        TypeExprNode {
                                            pos: (
                                                12,
                                                13,
                                            ),
                                            kind: Single(
                                                TypeIdentifierNode {
                                                    pos: (
                                                        12,
                                                        13,
                                                    ),
                                                    name: "A",
                                                    generics: [],
                                                },
                                            ),
                                            typ: Unknown,
                                        },
                                        TypeExprNode {
                                            pos: (
                                                17,
                                                18,
                                            ),
                                            kind: Single(
                                                TypeIdentifierNode {
                                                    pos: (
                                                        17,
                                                        18,
                                                    ),
                                                    name: "B",
                                                    generics: [],
                                                },
                                            ),
                                            typ: Unknown,
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        ],
                    },
                    return_type: Some(
                        TypeExprNode {
                            pos: (
                                24,
                                30,
                            ),
                            kind: Single(
                                TypeIdentifierNode {
                                    pos: (
                                        24,
                                        30,
                                    ),
                                    name: "String",
                                    generics: [],
                                },
                            ),
                            typ: Unknown,
                        },
                    ),
                    generic_type_constraints: [],
                    params: [
                        IdentifierNode {
                            pos: (
                                35,
                                36,
                            ),
                            name: "a",
                        },
                    ],
                    body: [
                        StatementNode {
                            pos: (
                                41,
                                45,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        41,
                                        45,
                                    ),
                                    kind: Literal(
                                        LiteralNode {
                                            pos: (
                                                41,
                                                45,
                                            ),
                                            kind: Str(
                                                "wow!",
                                            ),
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            ),
        },
    ],
}

