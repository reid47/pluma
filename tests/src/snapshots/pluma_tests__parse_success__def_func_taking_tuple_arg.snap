---
source: tests/src/parse_success.rs
expression: "def hello { (A, B) -> C } {\n  x => x\n}"
---

=== Source ===
def hello { (A, B) -> C } {
  x => x
}

=== Tokens ===
[
    KeywordDef(
        0,
        3,
    ),
    Identifier(
        4,
        9,
    ),
    LeftBrace(
        10,
        11,
    ),
    LeftParen(
        12,
        13,
    ),
    Identifier(
        13,
        14,
    ),
    Comma(
        14,
        15,
    ),
    Identifier(
        16,
        17,
    ),
    RightParen(
        17,
        18,
    ),
    Arrow(
        19,
        21,
    ),
    Identifier(
        22,
        23,
    ),
    RightBrace(
        24,
        25,
    ),
    LeftBrace(
        26,
        27,
    ),
    LineBreak(
        27,
        28,
    ),
    Identifier(
        30,
        31,
    ),
    DoubleArrow(
        32,
        34,
    ),
    Identifier(
        35,
        36,
    ),
    LineBreak(
        36,
        37,
    ),
    RightBrace(
        37,
        38,
    ),
]

=== Comments ===
{}

=== AST ===
ModuleNode {
    pos: (
        0,
        38,
    ),
    body: [
        TopLevelStatementNode {
            pos: (
                0,
                38,
            ),
            kind: Def(
                DefNode {
                    pos: (
                        0,
                        38,
                    ),
                    kind: Function {
                        signature: [
                            (
                                IdentifierNode {
                                    pos: (
                                        4,
                                        9,
                                    ),
                                    name: "hello",
                                    typ: Unknown,
                                },
                                TypeExprNode {
                                    pos: (
                                        10,
                                        25,
                                    ),
                                    kind: Func(
                                        TypeExprNode {
                                            pos: (
                                                12,
                                                18,
                                            ),
                                            kind: Tuple(
                                                [
                                                    TypeExprNode {
                                                        pos: (
                                                            13,
                                                            14,
                                                        ),
                                                        kind: Single(
                                                            TypeIdentifierNode {
                                                                pos: (
                                                                    13,
                                                                    14,
                                                                ),
                                                                name: "A",
                                                                generics: [],
                                                            },
                                                        ),
                                                    },
                                                    TypeExprNode {
                                                        pos: (
                                                            16,
                                                            17,
                                                        ),
                                                        kind: Single(
                                                            TypeIdentifierNode {
                                                                pos: (
                                                                    16,
                                                                    17,
                                                                ),
                                                                name: "B",
                                                                generics: [],
                                                            },
                                                        ),
                                                    },
                                                ],
                                            ),
                                        },
                                        TypeExprNode {
                                            pos: (
                                                22,
                                                23,
                                            ),
                                            kind: Single(
                                                TypeIdentifierNode {
                                                    pos: (
                                                        22,
                                                        23,
                                                    ),
                                                    name: "C",
                                                    generics: [],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ],
                    },
                    return_type: None,
                    generic_type_constraints: [],
                    params: [
                        IdentifierNode {
                            pos: (
                                30,
                                31,
                            ),
                            name: "x",
                            typ: Unknown,
                        },
                    ],
                    body: [
                        StatementNode {
                            pos: (
                                35,
                                36,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        35,
                                        36,
                                    ),
                                    kind: Identifier(
                                        IdentifierNode {
                                            pos: (
                                                35,
                                                36,
                                            ),
                                            name: "x",
                                            typ: Unknown,
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            ),
        },
    ],
}

