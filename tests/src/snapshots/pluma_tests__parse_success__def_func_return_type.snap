---
source: tests/src/parse_success.rs
expression: "def hello () -> { A -> B } {\n  { x => y }\n}"
---

=== Source ===
def hello () -> { A -> B } {
  { x => y }
}

=== Tokens ===
[
    KeywordDef(
        0,
        3,
    ),
    Identifier(
        4,
        9,
    ),
    LeftParen(
        10,
        11,
    ),
    RightParen(
        11,
        12,
    ),
    Arrow(
        13,
        15,
    ),
    LeftBrace(
        16,
        17,
    ),
    Identifier(
        18,
        19,
    ),
    Arrow(
        20,
        22,
    ),
    Identifier(
        23,
        24,
    ),
    RightBrace(
        25,
        26,
    ),
    LeftBrace(
        27,
        28,
    ),
    LineBreak(
        28,
        29,
    ),
    LeftBrace(
        31,
        32,
    ),
    Identifier(
        33,
        34,
    ),
    DoubleArrow(
        35,
        37,
    ),
    Identifier(
        38,
        39,
    ),
    RightBrace(
        40,
        41,
    ),
    LineBreak(
        41,
        42,
    ),
    RightBrace(
        42,
        43,
    ),
]

=== Comments ===
{}

=== AST ===
ModuleNode {
    pos: (
        0,
        43,
    ),
    body: [
        TopLevelStatementNode {
            pos: (
                0,
                43,
            ),
            kind: Def(
                DefNode {
                    pos: (
                        0,
                        43,
                    ),
                    kind: Function {
                        signature: [
                            (
                                IdentifierNode {
                                    pos: (
                                        4,
                                        9,
                                    ),
                                    name: "hello",
                                },
                                TypeExprNode {
                                    pos: (
                                        10,
                                        12,
                                    ),
                                    kind: EmptyTuple,
                                },
                            ),
                        ],
                    },
                    return_type: Some(
                        TypeExprNode {
                            pos: (
                                16,
                                26,
                            ),
                            kind: Func(
                                TypeExprNode {
                                    pos: (
                                        18,
                                        19,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                18,
                                                19,
                                            ),
                                            name: "A",
                                            generics: [],
                                        },
                                    ),
                                },
                                TypeExprNode {
                                    pos: (
                                        23,
                                        24,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                23,
                                                24,
                                            ),
                                            name: "B",
                                            generics: [],
                                        },
                                    ),
                                },
                            ),
                        },
                    ),
                    generic_type_constraints: [],
                    params: [],
                    body: [
                        StatementNode {
                            pos: (
                                31,
                                41,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        31,
                                        41,
                                    ),
                                    kind: Block {
                                        params: [
                                            IdentifierNode {
                                                pos: (
                                                    33,
                                                    34,
                                                ),
                                                name: "x",
                                            },
                                        ],
                                        body: [
                                            StatementNode {
                                                pos: (
                                                    38,
                                                    39,
                                                ),
                                                kind: Expr(
                                                    ExprNode {
                                                        pos: (
                                                            38,
                                                            39,
                                                        ),
                                                        kind: Identifier(
                                                            IdentifierNode {
                                                                pos: (
                                                                    38,
                                                                    39,
                                                                ),
                                                                name: "y",
                                                            },
                                                        ),
                                                        typ: Unknown,
                                                    },
                                                ),
                                            },
                                        ],
                                    },
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            ),
        },
    ],
}

