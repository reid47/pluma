---
source: compiler/tests/parse_success.rs
expression: "def hello (A, B) world C {\n  a, b, c => \"wow!\"\n}"
---

=== Source ===
def hello (A, B) world C {
  a, b, c => "wow!"
}

=== Tokens ===
[
    KeywordDef(
        0,
        3,
    ),
    Identifier(
        4,
        9,
    ),
    LeftParen(
        10,
        11,
    ),
    Identifier(
        11,
        12,
    ),
    Comma(
        12,
        13,
    ),
    Identifier(
        14,
        15,
    ),
    RightParen(
        15,
        16,
    ),
    Identifier(
        17,
        22,
    ),
    Identifier(
        23,
        24,
    ),
    LeftBrace(
        25,
        26,
    ),
    LineBreak(
        26,
        27,
    ),
    Identifier(
        29,
        30,
    ),
    Comma(
        30,
        31,
    ),
    Identifier(
        32,
        33,
    ),
    Comma(
        33,
        34,
    ),
    Identifier(
        35,
        36,
    ),
    DoubleArrow(
        37,
        39,
    ),
    StringLiteral(
        41,
        45,
    ),
    LineBreak(
        46,
        47,
    ),
    RightBrace(
        47,
        48,
    ),
]

=== Comments ===
{}

=== AST ===
ModuleNode {
    pos: (
        0,
        48,
    ),
    body: [
        TopLevelStatementNode {
            pos: (
                0,
                48,
            ),
            kind: Def(
                DefNode {
                    pos: (
                        0,
                        48,
                    ),
                    kind: Function {
                        signature: [
                            (
                                IdentifierNode {
                                    pos: (
                                        4,
                                        9,
                                    ),
                                    name: "hello",
                                },
                                TypeExprNode {
                                    pos: (
                                        10,
                                        16,
                                    ),
                                    kind: Tuple(
                                        [
                                            TypeExprNode {
                                                pos: (
                                                    11,
                                                    12,
                                                ),
                                                kind: Single(
                                                    TypeIdentifierNode {
                                                        pos: (
                                                            11,
                                                            12,
                                                        ),
                                                        name: "A",
                                                        generics: [],
                                                    },
                                                ),
                                                typ: Unknown,
                                            },
                                            TypeExprNode {
                                                pos: (
                                                    14,
                                                    15,
                                                ),
                                                kind: Single(
                                                    TypeIdentifierNode {
                                                        pos: (
                                                            14,
                                                            15,
                                                        ),
                                                        name: "B",
                                                        generics: [],
                                                    },
                                                ),
                                                typ: Unknown,
                                            },
                                        ],
                                    ),
                                    typ: Unknown,
                                },
                            ),
                            (
                                IdentifierNode {
                                    pos: (
                                        17,
                                        22,
                                    ),
                                    name: "world",
                                },
                                TypeExprNode {
                                    pos: (
                                        23,
                                        24,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                23,
                                                24,
                                            ),
                                            name: "C",
                                            generics: [],
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        ],
                    },
                    return_type: None,
                    generic_type_constraints: [],
                    params: [
                        IdentifierNode {
                            pos: (
                                29,
                                30,
                            ),
                            name: "a",
                        },
                        IdentifierNode {
                            pos: (
                                32,
                                33,
                            ),
                            name: "b",
                        },
                        IdentifierNode {
                            pos: (
                                35,
                                36,
                            ),
                            name: "c",
                        },
                    ],
                    body: [
                        StatementNode {
                            pos: (
                                41,
                                45,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        41,
                                        45,
                                    ),
                                    kind: Literal(
                                        LiteralNode {
                                            pos: (
                                                41,
                                                45,
                                            ),
                                            kind: Str(
                                                "wow!",
                                            ),
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            ),
        },
    ],
}

