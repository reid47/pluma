export const tokenTypes = {
  BOOLEAN: 'boolean-token',
  COLON: 'colon-token',
  COMMA: 'comma-token',
  DOLLAR: 'dollar-token',
  DOT: 'dot-token',
  EQUALS: 'equals-token',
  HASH: 'hash-token',
  KEYWORD: 'keyword-token',
  L_BRACE: 'left-brace-token',
  L_PAREN: 'left-paren-token',
  NULL: 'null-token',
  NUMBER: 'number-token',
  R_BRACE: 'right-brace-token',
  R_PAREN: 'right-paren-token',
  THICK_ARROW: 'thick-arrow-token',
  UNDEFINED: 'undefined-token'
};

const toMap = array => array.reduce((map, el) => ({ ...map, [el]: true }), {});

export const symbols = {
  '(': tokenTypes.L_PAREN,
  ')': tokenTypes.R_PAREN,
  '{': tokenTypes.L_BRACE,
  '}': tokenTypes.R_BRACE,
  $: tokenTypes.DOLLAR,
  ':': tokenTypes.COLON,
  '=': tokenTypes.EQUALS,
  '=>': tokenTypes.THICK_ARROW,
  '.': tokenTypes.DOT,
  ',': tokenTypes.COMMA,
  '#': tokenTypes.HASH
};

export const reservedWords = toMap([
  'abstract',
  'arguments',
  'await',
  'boolean',
  'break',
  'byte',
  'case',
  'catch',
  'char',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'double',
  'else',
  'enum',
  'eval',
  'export',
  'extends',
  'false',
  'final',
  'finally',
  'float',
  'for',
  'function',
  'goto',
  'if',
  'implements',
  'import',
  'in',
  'instanceof',
  'int',
  'interface',
  'let',
  'long',
  'native',
  'new',
  'null',
  'package',
  'private',
  'protected',
  'public',
  'return',
  'short',
  'static',
  'super',
  'switch',
  'synchronized',
  'this',
  'throw',
  'throws',
  'transient',
  'true',
  'try',
  'typeof',
  'var',
  'void',
  'volatile',
  'while',
  'with',
  'yield'
]);
